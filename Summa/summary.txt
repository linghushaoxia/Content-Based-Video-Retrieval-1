You sort an array of size N, put 1 item in place, and continue sorting an array of size N – 1 (heapsort is slightly different).
They can be faster for sorting small data sets (< 10 items).
O(N) clearly is the minimum sorting time possible, since we must examine every element at least once (how can you sort an item you do not even examine?).
Assume we are sorting a list or array of N elements
Once sorted, smaller items are on the left (first item) and larger items are on the right (last item)
Bubble Sort [Best: O(N), Worst:O(N^2)]
Bubble sort the remaining N -1 items.
With bubble-sort, either you bubble items “forward” (left-to-right) and move the endpoint backwards (decreasing), or bubble items “backward” (right-to-left) and increase the left endpoint.
Selection Sort [Best/Worst: O(N^2)]
Repeat the selection sort on the remaining N-1 items.
Insertion Sort [Best: O(N), Worst:O(N^2)]
Start with a sorted list of 1 element on the left, and N-1 unsorted items on the right.
Take the first unsorted item (element #2) and insert it into the sorted list, moving elements as necessary.
We now have a sorted list of size 2, and N -2 unsorted elements.
If the data is reverse-sorted, each item must travel to the head of the list, and this becomes bubble-sort.
Scan the items from left-to-right, and swap items greater than the pivot with the last item (and decrement the “last” counter).
This puts the “heavy” items at the end of the list, a little like bubble sort.
Swap the items if found, and keep going until the pointers cross — re-insert the pivot
That means we are only creating a subset of one item smaller each time, which gives us O(N^2) behavior in the worst case.
If you choose the first item, it may be the smallest item in a sorted list and give worst-case behavior.
Counting Sort [Best/Avg/Worst: O(N)]
Inserting items into their proper position is O(N)
Radix Sort [Best/Avg/Worst: O(N)]
Because testing was easy, I made every test case I could think of: Pre-sorted forward, backwards, 1 element, 2 elements, even and odd items, etc.